{"version":3,"file":"static/js/8.dd1862b8.chunk.js","mappings":"2IAIM,MAAOA,UAAwBC,EAAAA,GAInCC,WAAAA,GACEC,QAJM,KAAAC,gBAA0C,KAK5C,oBAAqBC,SACvBC,KAAKF,gBAAkBC,OAAOD,gBAC9BC,OAAOE,iBAAiB,eAAgB,KACtCD,KAAKE,SAGX,CAEO,WAAMC,CAAMC,GACZJ,KAAKF,iBACRE,KAAKK,8BAEDL,KAAKE,OACX,MAAMJ,EAAkBE,KAAKF,gBACvBQ,EAAYN,KAAKO,+BAA+BH,GACtD,OAAO,IAAII,QAAQ,CAACC,EAASC,KAC3BJ,EAAUK,MAAQ,KAChBF,KAEFH,EAAUM,QAAWC,IACnBH,EAAOG,IAETf,EAAgBK,MAAMG,IAE1B,CAEO,UAAMJ,GACNF,KAAKF,iBACRE,KAAKK,wBAEPL,KAAKF,gBAAgBgB,QACvB,CAEO,2BAAMC,GAIX,MAAO,CAAEC,UAHMhB,KAAKiB,2BACKC,IAAKC,GAAUA,EAAMC,MACVC,OAAO,CAACC,EAAGC,EAAGC,IAAMA,EAAEC,QAAQH,IAAMC,GAE1E,CAEO,wBAAMG,GAIX,MAAO,CAAEC,OADM3B,KAAKiB,2BAEtB,CAEO,yBAAMW,CAAoBxB,GAG/B,MAAO,CAAEyB,iBAFY7B,KAAKe,yBACSC,UAAUc,SAAS1B,EAAQgB,MAEhE,CAEO,iBAAMW,GACX/B,KAAKgC,yBACP,CAEQzB,8BAAAA,CAA+BH,GACrC,MAAMuB,EAAS3B,KAAKiB,2BACdX,EAAY,IAAI2B,0BAChB,KAAEC,EAAI,KAAEd,EAAI,KAAEe,EAAI,MAAEC,EAAK,OAAEC,EAAM,MAAElB,GAAUf,EAiBnD,OAhBIe,IACFb,EAAUa,MAAQQ,EAAOR,IAEvBkB,IACF/B,EAAU+B,OAASA,GAAU,GAAKA,GAAU,EAAIA,EAAS,GAEvDF,IACF7B,EAAU6B,KAAOA,GAAQ,IAAOA,GAAQ,GAAKA,EAAO,GAElDC,IACF9B,EAAU8B,MAAQA,GAAS,GAAKA,GAAS,EAAIA,EAAQ,GAEnDhB,IACFd,EAAUc,KAAOA,GAEnBd,EAAU4B,KAAOA,EACV5B,CACT,CAEQW,wBAAAA,GAON,OANKjB,KAAKF,iBACRE,KAAKK,0BAEFL,KAAKsC,iBAAmBtC,KAAKsC,gBAAgBC,OAAS,KACzDvC,KAAKsC,gBAAkBtC,KAAKF,gBAAgB0C,aAEvCxC,KAAKsC,eACd,CAEQjC,qBAAAA,GACN,MAAML,KAAKyC,YAAY,qDACzB,CAEQT,uBAAAA,GACN,MAAMhC,KAAK0C,cAAc,0BAC3B,E","sources":["../node_modules/@capacitor-community/text-to-speech/src/web.ts"],"sourcesContent":["import { WebPlugin } from '@capacitor/core';\n\nimport type { TextToSpeechPlugin, TTSOptions } from './definitions';\n\nexport class TextToSpeechWeb extends WebPlugin implements TextToSpeechPlugin {\n  private speechSynthesis: SpeechSynthesis | null = null;\n  private supportedVoices: SpeechSynthesisVoice[] | undefined;\n\n  constructor() {\n    super();\n    if ('speechSynthesis' in window) {\n      this.speechSynthesis = window.speechSynthesis;\n      window.addEventListener('beforeunload', () => {\n        this.stop();\n      });\n    }\n  }\n\n  public async speak(options: TTSOptions): Promise<void> {\n    if (!this.speechSynthesis) {\n      this.throwUnsupportedError();\n    }\n    await this.stop();\n    const speechSynthesis = this.speechSynthesis;\n    const utterance = this.createSpeechSynthesisUtterance(options);\n    return new Promise((resolve, reject) => {\n      utterance.onend = () => {\n        resolve();\n      };\n      utterance.onerror = (event: any) => {\n        reject(event);\n      };\n      speechSynthesis.speak(utterance);\n    });\n  }\n\n  public async stop(): Promise<void> {\n    if (!this.speechSynthesis) {\n      this.throwUnsupportedError();\n    }\n    this.speechSynthesis.cancel();\n  }\n\n  public async getSupportedLanguages(): Promise<{ languages: string[] }> {\n    const voices = this.getSpeechSynthesisVoices();\n    const languages = voices.map((voice) => voice.lang);\n    const filteredLanguages = languages.filter((v, i, a) => a.indexOf(v) == i);\n    return { languages: filteredLanguages };\n  }\n\n  public async getSupportedVoices(): Promise<{\n    voices: SpeechSynthesisVoice[];\n  }> {\n    const voices = this.getSpeechSynthesisVoices();\n    return { voices };\n  }\n\n  public async isLanguageSupported(options: { lang: string }): Promise<{ supported: boolean }> {\n    const result = await this.getSupportedLanguages();\n    const isLanguageSupported = result.languages.includes(options.lang);\n    return { supported: isLanguageSupported };\n  }\n\n  public async openInstall(): Promise<void> {\n    this.throwUnimplementedError();\n  }\n\n  private createSpeechSynthesisUtterance(options: TTSOptions): SpeechSynthesisUtterance {\n    const voices = this.getSpeechSynthesisVoices();\n    const utterance = new SpeechSynthesisUtterance();\n    const { text, lang, rate, pitch, volume, voice } = options;\n    if (voice) {\n      utterance.voice = voices[voice];\n    }\n    if (volume) {\n      utterance.volume = volume >= 0 && volume <= 1 ? volume : 1;\n    }\n    if (rate) {\n      utterance.rate = rate >= 0.1 && rate <= 10 ? rate : 1;\n    }\n    if (pitch) {\n      utterance.pitch = pitch >= 0 && pitch <= 2 ? pitch : 2;\n    }\n    if (lang) {\n      utterance.lang = lang;\n    }\n    utterance.text = text;\n    return utterance;\n  }\n\n  private getSpeechSynthesisVoices(): SpeechSynthesisVoice[] {\n    if (!this.speechSynthesis) {\n      this.throwUnsupportedError();\n    }\n    if (!this.supportedVoices || this.supportedVoices.length < 1) {\n      this.supportedVoices = this.speechSynthesis.getVoices();\n    }\n    return this.supportedVoices;\n  }\n\n  private throwUnsupportedError(): never {\n    throw this.unavailable('SpeechSynthesis API not available in this browser.');\n  }\n\n  private throwUnimplementedError(): never {\n    throw this.unimplemented('Not implemented on web.');\n  }\n}\n"],"names":["TextToSpeechWeb","WebPlugin","constructor","super","speechSynthesis","window","this","addEventListener","stop","speak","options","throwUnsupportedError","utterance","createSpeechSynthesisUtterance","Promise","resolve","reject","onend","onerror","event","cancel","getSupportedLanguages","languages","getSpeechSynthesisVoices","map","voice","lang","filter","v","i","a","indexOf","getSupportedVoices","voices","isLanguageSupported","supported","includes","openInstall","throwUnimplementedError","SpeechSynthesisUtterance","text","rate","pitch","volume","supportedVoices","length","getVoices","unavailable","unimplemented"],"sourceRoot":""}